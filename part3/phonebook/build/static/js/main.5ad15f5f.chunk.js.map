{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","id","updatedPerson","put","delete","Filter","value","eventHandler","onChange","Form","newNameValue","newNameInput","newPhoneValue","newPhoneInput","newPersonHandler","type","onClick","Notification","message","className","Error","Persons","filteredPersonsArray","handleDelete","map","person","key","name","phone","App","useState","persons","setPersons","newName","setNewName","newPhone","setNewPhone","searchString","setSearchString","notification","setNotification","error","setError","filteredPersons","setFilteredPersons","useEffect","personService","initialPersons","notify","isError","setTimeout","event","currentSearchString","target","tmpFilteredPersons","filter","toLowerCase","includes","preventDefault","i","window","confirm","responseUpdatedPerson","catch","length","personToAdd","concat","alert","deletedPerson","newPersons","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ad15f5f.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons' //'http://localhost:3001/api/persons'\r\n\r\nconst getAllPersons = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst createPerson = (newPerson) => {\r\n    const request = axios.post(baseUrl, newPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst updatePerson = (id, updatedPerson) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, updatedPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAllPersons, createPerson, updatePerson, deletePerson }","import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons'\r\n\r\n\r\nconst Filter = ({ value, eventHandler }) => {\r\n  return (\r\n    <div>\r\n      filter shown with: <input value={value} onChange={eventHandler} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Form = ({newNameValue, newNameInput, newPhoneValue, newPhoneInput, newPersonHandler}) => {\r\n    return (\r\n      <form>\r\n        <div>\r\n          name: <input value={newNameValue} onChange={newNameInput}/>\r\n          <br />\r\n          number: <input value={newPhoneValue} onChange={newPhoneInput}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\" onClick={newPersonHandler}>add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) { return null }\r\n  \r\n  return (\r\n    <div className=\"notification\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Error = ({ message }) => {\r\n  if (message === null) { return null }\r\n  \r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Persons = ({ filteredPersonsArray, handleDelete}) => {\r\n  return (\r\n    <div>\r\n      {filteredPersonsArray.map((person) =>\r\n        <div key={person.name}>\r\n          {person.name} {person.phone} \r\n          <button onClick={() => handleDelete(person)}>Delete</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([]) \r\n  const [ newName, setNewName ] = useState('') // New name input box state\r\n  const [ newPhone, setNewPhone ] = useState('') // New Phone input box state\r\n  const [ searchString, setSearchString] = useState('') // Filter input box state\r\n  const [ notification, setNotification ] = useState(null)\r\n  const [ error, setError ] = useState(null)\r\n\r\n  // Filtered persons array state\r\n  const [ filteredPersons, setFilteredPersons ] = useState(persons)\r\n\r\n  const hook = () => {\r\n    personService\r\n      .getAllPersons()\r\n      .then(initialPersons => {\r\n        setPersons(initialPersons)\r\n        setFilteredPersons(initialPersons)\r\n      })\r\n  }\r\n\r\n  // Get persons data from the server\r\n  useEffect(hook, [])\r\n\r\n\r\n  const notify = (message, isError) => {\r\n    if (isError) { setError(message) }\r\n    else { setNotification(message) }\r\n    //setNotification(message)\r\n    setTimeout(() => {\r\n      setNotification(null)\r\n    }, 5000)\r\n  }\r\n\r\n  // Name input box event handler\r\n  const handleNameInput = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n\r\n  // Phone input box event handler\r\n  const handlePhoneInput = (event) => {\r\n    setNewPhone(event.target.value)\r\n  }\r\n\r\n\r\n  // Form submission event handler\r\n  const handleNewPerson = (event) => {\r\n    event.preventDefault()\r\n\r\n    // Check if both input fields are populated\r\n    if (newName === '' || newPhone === '') {\r\n        window.alert(\"Please enter a name and a number!\")\r\n        return\r\n    }\r\n    \r\n    // Check if newPerson already exists in the persons array\r\n    for (let i = 0; i < persons.length; i++) {\r\n      if (persons[i].name === newName) {\r\n        const result = window.confirm(`${newName} is already added to the phonebook, replace the old number with the new one?`)\r\n        \r\n        // If approved, update the person's number\r\n        if (result) {\r\n          // Create new person object from existing and replace the number\r\n          const updatedPerson = {...persons[i], phone: newPhone}\r\n\r\n          // Update the person on the backend server\r\n          personService\r\n            .updatePerson(persons[i].id, updatedPerson)\r\n            .then(responseUpdatedPerson => {\r\n              persons[i] = responseUpdatedPerson\r\n              setPersons(persons)\r\n              setFilteredPersons(persons)\r\n              setSearchString('')\r\n              setNewName('')\r\n              setNewPhone('')\r\n              notify(`Updated ${newName}'s phone number to ${newPhone}`, false)\r\n            })\r\n            .catch(error => {\r\n              notify(`${error.response.data.error}`, true)\r\n            })\r\n        }\r\n\r\n        return\r\n      }\r\n    }\r\n\r\n    \r\n    // Create new person object\r\n    const newPerson = { name: newName, phone: newPhone }\r\n\r\n\r\n    // Save new person to the backend server\r\n    personService\r\n      .createPerson(newPerson)\r\n      .then(personToAdd => {\r\n        setPersons(persons.concat(personToAdd))\r\n        setFilteredPersons(persons.concat(personToAdd))\r\n        setSearchString('')\r\n        setNewName('')\r\n        setNewPhone('')\r\n        notify(`Added person ${personToAdd.name}`, false)\r\n      })\r\n      .catch(error => {\r\n        notify(`${error.response.data.error}`, true)\r\n      })\r\n  }\r\n\r\n\r\n  // Filter input event handler\r\n  const handleSearchStringInput = (event) => {\r\n      const currentSearchString = event.target.value\r\n      setSearchString(currentSearchString)\r\n\r\n      // Generate filtered list\r\n      const tmpFilteredPersons = persons.filter(person => \r\n        person.name.toLowerCase().includes(currentSearchString.toLowerCase())\r\n      )\r\n\r\n      setFilteredPersons(tmpFilteredPersons)\r\n  }\r\n\r\n  // Handle delete logic\r\n  const handleDelete = (deletedPerson) => {\r\n    //?? axios delete response doesn't include any data from the deleted object\r\n    //?? I need to do removal logic against the deletedPerson object rather than response data\r\n    personService\r\n      .deletePerson(deletedPerson.id)\r\n      .then(response => {\r\n        const newPersons = persons.filter(p => p.id !== deletedPerson.id) // Removal logic with deletedPerson object\r\n        setPersons(newPersons)\r\n        setFilteredPersons(newPersons)\r\n        setSearchString('')\r\n        setNewName('')\r\n        setNewPhone('')\r\n        notify(`Deleted ${deletedPerson.name}`, false)\r\n      })\r\n      .catch(error => {\r\n        notify(`Failed to delete ${deletedPerson.name} with ID ${deletedPerson.id}.`, true)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <h2>Phonebook</h2>\r\n        <Notification message={notification} />\r\n        <Error message={error} />\r\n        <Filter value={searchString} eventHandler={handleSearchStringInput} />\r\n        <h3>Add a new</h3>\r\n        <Form \r\n            newNameValue={newName}\r\n            newNameInput={handleNameInput}\r\n            newPhoneValue={newPhone}\r\n            newPhoneInput={handlePhoneInput}\r\n            newPersonHandler={handleNewPerson}\r\n        />\r\n        <h2>Numbers</h2>\r\n        <Persons filteredPersonsArray={filteredPersons} handleDelete={handleDelete} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}